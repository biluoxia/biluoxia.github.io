<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title><![CDATA[art-Template基本用法]]></title>
      <url>/2017/10/14/art-Template%E5%9F%BA%E6%9C%AC%E7%94%A8%E6%B3%95/</url>
      <content type="html"></content>
      
        
    </entry>
    
    <entry>
      <title><![CDATA[Object.defineProperty]]></title>
      <url>/2017/10/13/Object-defineProperty/</url>
      <content type="html"><![CDATA[<h2 id="功能"><a href="#功能" class="headerlink" title="功能"></a>功能</h2><p>Object.defineProperty方法可以用来给对象添加属性,并且可以设置这个属性的特性</p>
<p>其他给对象添加属性的方法:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">1.点语法</div><div class="line"></div><div class="line">2.关联数组语法 []</div><div class="line"></div><div class="line">但是,这两种方法只能添加属性,不能设置属性</div></pre></td></tr></table></figure></p>
<h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Object.defineProperty(obj,prop,desctiptor</div><div class="line">)</div><div class="line"></div><div class="line">obj 需要被操作的目标对象</div><div class="line">name 目标对象需要定义或者修改的属性名,类型是字符串</div><div class="line">desctiptor 将定义或修改的属性的描述符,以&#123;&#125;形式传入</div></pre></td></tr></table></figure>
<h2 id="数据描述符"><a href="#数据描述符" class="headerlink" title="数据描述符"></a>数据描述符</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">value :该属性对应的值;</div><div class="line">writable :当且仅当该属性的值为true时,才可以修改该属性; 默认值为false 不可以被修改</div><div class="line">configurable:当且仅当改属性值为true时,该属性的值才可以被删除;默认为false,不能删除</div><div class="line">enumrable:当且仅当值为true时,该属性才可以被for in遍历出来;默认为false,不能forin</div></pre></td></tr></table></figure>
<h2 id="存取描述符"><a href="#存取描述符" class="headerlink" title="存取描述符"></a>存取描述符</h2><ol>
<li><p>get:function(){}</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">这个函数会在外界访问这个属性的值的时候,被自动调用;</div><div class="line">外界获取到的属性值,就是这个函数的返回值</div><div class="line">比如:</div><div class="line">console.log(obj.name)  </div><div class="line">var a = obj.name</div><div class="line">这些方式都是在获取值,他们会触发get方法,并且,get方法的返回值会给他们</div></pre></td></tr></table></figure>
</li>
<li><p>set:function(value){}</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">这个函数,会在外界为这个属性赋值的时候,被自动调用;</div><div class="line">函数的形参,会接收到外界赋值的内容,也就是=右边的内容</div><div class="line">比如:</div><div class="line">obj.name = &quot;&quot;  </div><div class="line">obj[&quot;name&quot;] = &quot;&quot;,</div><div class="line">这样就是在给对象属性赋值,就会自动调用set方法,并且,把等号右边的内容交给形参value</div></pre></td></tr></table></figure>
</li>
</ol>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><p>利用存取描述符,来改变等号的特性,就是两个相同的属性被多次赋值时,不会被覆盖,而是追加</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> obj = &#123;&#125;;</div><div class="line"><span class="built_in">Object</span>.defineProperty(obj,<span class="string">"name"</span>,&#123;</div><div class="line">    get : <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">        <span class="keyword">return</span> <span class="keyword">this</span>._name;</div><div class="line">        <span class="comment">//_name,是一个保存这个值的变量</span></div><div class="line">    &#125;,</div><div class="line">    set : <span class="function"><span class="keyword">function</span>(<span class="params">value</span>)</span>&#123;</div><div class="line">        <span class="comment">//this._name = value;</span></div><div class="line">        <span class="comment">//将设置的属性值赋值给this._name,就会在获取是触发get方法,并且得到这个属性值</span></div><div class="line"></div><div class="line">        <span class="comment">//但是这样还是会被覆盖,因此,需要修改一些写法</span></div><div class="line">       <span class="comment">// this._name = this._name + ";" + value;</span></div><div class="line">         <span class="comment">//当返回值是undefined,显示"",代码如下</span></div><div class="line">         <span class="keyword">this</span>._name = (<span class="keyword">this</span>._name || <span class="string">""</span>) + <span class="string">";"</span> + value; </div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> js高级 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Git 分支]]></title>
      <url>/2017/10/12/Git-%E5%88%86%E6%94%AF/</url>
      <content type="html"><![CDATA[<h1 id="分支"><a href="#分支" class="headerlink" title="分支"></a>分支</h1><h2 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h2><p>多任务并行开发的时候，避免不了，各个任务之间相互影响，我们也可以采用备份文件夹的方式，来避免影响，但是这种方式不可取，因为一旦任务过多，文件夹数量也会随之增多不容易维护，最终的代码合并，也会出现问题</p>
<h2 id="分支-1"><a href="#分支-1" class="headerlink" title="分支"></a>分支</h2><p>git中有个内容，叫做分支，分支的作用，其实和刚才我们做的备份一个文件夹的功能一致，就是对于当前的代码，做一个备份</p>
<h2 id="分支的使用"><a href="#分支的使用" class="headerlink" title="分支的使用"></a>分支的使用</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">1.创建分支</div><div class="line">git branch 分支名称</div><div class="line"></div><div class="line">2.切换分支</div><div class="line">git checkout 分支名称</div><div class="line"></div><div class="line">3.合并分支</div><div class="line">git checkout master</div><div class="line">git merge 要合并的分支的名称</div><div class="line"></div><div class="line">4.删除分支</div><div class="line">git branch -d 分支名称</div><div class="line"></div><div class="line">5.创建并切换分支</div><div class="line">git checkout -b 分支名称</div></pre></td></tr></table></figure>
<h2 id="冲突问题"><a href="#冲突问题" class="headerlink" title="冲突问题"></a>冲突问题</h2><p>分支A中创建了文件xx.txt, 分支B中也创建了个xx.txt，那么git就会发现，有两个同名的文件，这时候，就是冲突产生了，冲突产生之后，合并会失败，需要先解决冲突，然后再次提交，才能正常的合并。</p>
<h2 id="解决冲突"><a href="#解决冲突" class="headerlink" title="解决冲突"></a>解决冲突</h2><p>冲突产生之后，git会告知哪个文件冲突了，然后在文件中，会用 &gt;&gt;&gt;&gt; ==== &lt;&lt;&lt; 这样的方式将冲突的内容标记出来，我们只需要将标记删除，然后将代码改成自己想要的结果，再次add commit即可！！</p>
<h2 id="分支的使用原则"><a href="#分支的使用原则" class="headerlink" title="分支的使用原则"></a>分支的使用原则</h2><p>只要有新的任务，就开辟一个新的分支去做，做完之后，将分支合并回去就可以了！！</p>
<h2 id="master分支"><a href="#master分支" class="headerlink" title="master分支"></a>master分支</h2><p>这个分支，是git默认自动创建的！！</p>
<p>创建的时机，并不是在git init之后就会有，而是，在第一次提交完成之后，才会默认的创建出来这个分支！！</p>
<h2 id="分支切换要注意的事项"><a href="#分支切换要注意的事项" class="headerlink" title="分支切换要注意的事项"></a>分支切换要注意的事项</h2><p>必须先将所有的更改，做一次提交之后，再切换分支！！！</p>
<h2 id="回滚操作的恢复操作"><a href="#回滚操作的恢复操作" class="headerlink" title="回滚操作的恢复操作"></a>回滚操作的恢复操作</h2><ol>
<li><p>查看所有的操作日志<br> <code>git log -g</code></p>
</li>
<li><p>创建新的分支，将要恢复到的版本号作为最后一个参数<br> <code>git branch 分支名 版本号</code></p>
</li>
</ol>
]]></content>
      
        
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[Hello World]]></title>
      <url>/2017/10/12/hello-world/</url>
      <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="external">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="external">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="external">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="external">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo new <span class="string">"My New Post"</span></div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="external">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo server</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="external">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo generate</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="external">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$ hexo deploy</div></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="external">Deployment</a></p>
]]></content>
      
        
    </entry>
    
  
  
</search>
